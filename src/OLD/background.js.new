// background.js
let snapchatUserId = null;

chrome.storage.local.get(['snapchatUserId'], (result) => {
  if (result.snapchatUserId) {
    snapchatUserId = result.snapchatUserId;
  }
});

// EVENTS
chrome.webRequest.onBeforeRequest.addListener(
  function(details) {
    console.log("onBeforeRequest triggered: ", details);
    
    if (details.requestBody && details.requestBody.formData) {
        if (details.requestBody.formData.snapchat_user_id) {
            console.log("User_Id: ", details.requestBody.formData.snapchat_user_id[0]);
            snapchatUserId = details.requestBody.formData.snapchat_user_id[0];
            chrome.storage.local.set({ 'snapchatUserId': snapchatUserId });
        }
    }
    return {}; 
  },
  { urls: ["*://*.snapchat.com/ami/friends"] },
  ['requestBody']
);

// Message handler for content script communication
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === 'storeResponseData' && request.data) {
    console.log('Received response data from content script');
    const friendsResponseData = {
      timestamp: new Date().toISOString(),
      responseUrl: request.url || 'unknown',
      responseBody: request.data,
      capturedBy: request.captureMethod || 'content_script'
    };

    chrome.storage.local.set({ 'friendsResponseData': friendsResponseData });
  }
  else if (request.action === 'getCookies') {
    console.log('Cookie request received from content script');
    const cookieNames = request.cookieNames || [];
    const url = request.url || 'https://web.snapchat.com';
    
    if (cookieNames.length === 0) {
      sendResponse({ success: false, error: 'No cookie names provided' });
      return true;
    }
    
    const result = {};
    let cookiesProcessed = 0;
    
    cookieNames.forEach(name => {
      chrome.cookies.get({ url, name }, (cookie) => {
        if (cookie) {
          result[name] = cookie.value;
          console.log(`Retrieved cookie: ${name}`);
        } else {
          console.log(`Cookie not found: ${name}`);
        }
        
        cookiesProcessed++;
        
        // When all cookies have been processed, send the response
        if (cookiesProcessed === cookieNames.length) {
          console.log(`Sending ${Object.keys(result).length} cookies back to content script`);
          sendResponse({ success: true, cookies: result });
        }
      });
    });
    
    return true; // Keep the message channel open for async response
  }
  else if (request.action === 'getData') {
    // Get the latest data from storage to ensure we have the most recent version
    chrome.storage.local.get(['snapchatUserId', 'friendsResponseData'], (result) => {
      sendResponse({ 
        snapchatUserId: result.snapchatUserId || snapchatUserId,
        friendsResponseData: result.friendsResponseData || null
      });
    });
    return true; // Keep the message channel open for async response
  }
});

console.log('Background script loaded');
